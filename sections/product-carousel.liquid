{% schema %}
{
  "name": "Carrossel de Produtos",
  "settings": [
    {
      "type": "collection",
      "id": "collection",
      "label": "Coleção de produtos"
    },
    {
      "type": "number",
      "id": "products_to_show",
      "label": "Quantidade de produtos",
      "default": 8
    }
  ],
  "presets": [
    {
      "name": "Carrossel de Produtos"
    }
  ]
}
{% endschema %}

{% assign collection = collections[section.settings.collection] %}
{% if collection and collection.products_count > 0 %}
  {% assign products_in_cart = 0 %}
  {% for item in cart.items %}
    {% if collection.products contains item.product %}
      {% assign products_in_cart = products_in_cart | plus: 1 %}
    {% endif %}
  {% endfor %}

  <div class="product-carousel page-width">
    <div class="carousel-counter">
      {% if products_in_cart == 1 %}
        1/3
      {% elsif products_in_cart == 2 %}
        2/3
      {% elsif products_in_cart >= 3 %}
        10% de Desconto
      {% else %}
        0/3
      {% endif %}
    </div>
    <div class="product-carousel__track">
      {% for product in collection.products %}
        <div class="product-card" data-product-id="{{ product.id }}">
          <a href="{{ product.url }}">
            <img
              src="{{ product.featured_image | image_url: width:400 }}"
              alt="{{ product.title }}"
              width="400"
              height="400"
            >
            <h3>{{ product.title }}</h3>
            <span class="price">{{ product.price | money }}</span>
          </a>
          <button
            type="button"
            class="add-to-cart-btn"
            data-variant-id="{{ product.variants.first.id }}"
          >
            Adicionar ao carrinho
          </button>
        </div>
      {% endfor %}
    </div>
    <button class="carousel-prev">&#8592;</button>
    <button class="carousel-next">&#8594;</button>
  </div>
{% else %}
  <p>Nenhum produto encontrado.</p>
{% endif %}

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const carousel = document.querySelector('.product-carousel');
    if (!carousel) return;
    const track = carousel.querySelector('.product-carousel__track');
    const prev = carousel.querySelector('.carousel-prev');
    const next = carousel.querySelector('.carousel-next');
    const counter = carousel.querySelector('.carousel-counter');
    let scrollIndex = 0;

    function getCardWidth() {
      const card = track.querySelector('.product-card');
      if (!card) return 0;
      const style = window.getComputedStyle(card);
      const width = card.offsetWidth;
      const marginRight = parseInt(style.marginRight) || 0;
      const marginLeft = parseInt(style.marginLeft) || 0;
      return width + marginLeft + marginRight;
    }

    function getMaxScrollIndex() {
      const totalCards = track.querySelectorAll('.product-card').length;
      const visibleCards = getVisibleCards();
      return Math.max(0, totalCards - visibleCards);
    }

    function getVisibleCards() {
      const carouselWidth = carousel.offsetWidth;
      const cardWidth = getCardWidth();
      if (cardWidth === 0) return 1;
      return Math.floor(carouselWidth / cardWidth);
    }

    function updateCarousel() {
      track.style.transition = 'none';
      track.style.transform = 'translateX(0)';
    }

    prev.addEventListener('click', function () {
      const cardWidth = getCardWidth();
      // Move o último card para o início, sem animação
      track.insertBefore(track.lastElementChild, track.firstElementChild);
      track.style.transition = 'none';
      track.style.transform = `translateX(-${cardWidth}px)`;
      // Agora anima para a posição correta
      setTimeout(() => {
        track.style.transition = 'transform 0.3s';
        track.style.transform = 'translateX(0)';
      }, 10);
    });

    next.addEventListener('click', function () {
      const cardWidth = getCardWidth();
      track.style.transition = 'transform 0.3s';
      track.style.transform = `translateX(-${cardWidth}px)`;
      setTimeout(() => {
        // Move o primeiro card para o final
        track.appendChild(track.children[0]);
        track.style.transition = 'none';
        track.style.transform = 'translateX(0)';
      }, 300);
    });

    window.addEventListener('resize', function () {
      // Garante que o carrossel se ajuste ao redimensionar a tela
      updateCarousel();
    });

    // AJAX Add to Cart (mantém igual)
    const addToCartButtons = carousel.querySelectorAll('.add-to-cart-btn');
    addToCartButtons.forEach(btn => {
      btn.addEventListener('click', function () {
        const variantId = this.getAttribute('data-variant-id');
        fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id: variantId, quantity: 1 })
        })
        .then(response => response.json())
        .then(data => {
          fetch('/cart.js')
            .then(res => res.json())
            .then(cart => {
              let count = 0;
              {% raw %}
              cart.items.forEach(item => {
                const productIds = Array.from(track.children).map(card => parseInt(card.getAttribute('data-product-id')));
                if (productIds.includes(item.product_id)) {
                  count += 1;
                }
              });
              {% endraw %}
              if (count === 1) {
                counter.textContent = '1/3';
              } else if (count === 2) {
                counter.textContent = '2/3';
              } else if (count >= 3) {
                counter.textContent = '10% de Desconto';
              } else {
                counter.textContent = '0/3';
              }
            });
        });
      });
    });

    // Inicializa o carrossel
    updateCarousel();
  });
</script>
